const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const mongoose = require('mongoose');
const keys = require('../config/keys');

const User = mongoose.model('users');

// user in arg is user model - what we just pulled out of database from GoogleStrategy
// every user will have an id generated by mongo. user.id is a shortcut to longform mongo name

passport.serializeUser((user, done) => {
  // take user and turn it into id for cookie
  return done(null, user.id);
});

passport.deserializeUser((id, done) => {
  // take id and turn it back into a user (mongoose model instance)
  User.findById(id).then(user => {
    return done(null, user);
  });
});

passport.use(
  new GoogleStrategy(
    {
      clientID: keys.googleClientID,
      clientSecret: keys.googleClientSecret,
      // we'll come back to update callbackURL route
      callbackURL: '/auth/google/callback'
    },
    (accessToken, refreshToken, profile, done) => {
      User.findOne({
        googleId: profile.id
      }).then(existingUser => {
        if (existingUser) {
          // done(error, existingUser);
          return done(null, existingUser);
        } else {
          new User({ googleId: profile.id })
            .save()
            .then(user => done(null, user));
        }
      });
      // any time we reach out to our MongoDB in any form, we're initiating an
      // async action. User.findOne returns a promise.
      // this creates new instance of user but doesn't yet persist it to the DB until we call .save() at the end
    }
  )
);
