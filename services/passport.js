const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const mongoose = require('mongoose');
const keys = require('../config/keys');

const User = mongoose.model('users');

// user in arg is user model - what we just pulled out of database from GoogleStrategy
// every user will have an id generated by mongo. user.id is a shortcut to longform mongo name

passport.serializeUser((user, done) => {
  // take user and turn it into id for cookie
  return done(null, user.id);
});

passport.deserializeUser((id, done) => {
  // take id and turn it back into a user (mongoose model instance)
  User.findById(id).then(user => {
    return done(null, user);
  });
});

passport.use(
  new GoogleStrategy(
    {
      clientID: keys.googleClientID,
      clientSecret: keys.googleClientSecret,
      callbackURL: '/auth/google/callback',
      proxy: true
    },
    async (accessToken, refreshToken, profile, done) => {
      const existingUser = await User.findOne({ googleId: profile.id });
      if (existingUser) {
        // done(error, existingUser);
        return done(null, existingUser);
      }
      const user = await new User({ googleId: profile.id }).save();
      done(null, user);
    }
  )
);
